// Code generated on {{.Date}}. DO NOT EDIT.

// Copyright 1988 John Gilbert and Tim Peierls
// All rights reserved.

package {{.Package}}

import "fmt"

// lufact provides sparse LU factorization with partial pivoting.
//
// Given a matrix A in sparse format by columns, perform an LU
// factorization, with partial or threshold pivoting, if desired.  The
// factorization is PA = LU, where L and U are triangular.  P, L, and U
// are returned; see below for format.  This subroutine uses the
// Coleman-Gilbert-Peierls algorithm, in which total time is O(nonzero
// multiplications).
//
// If A is the same array as LU, the solution overwrites the original
// values of A.
//
// Input parameters:
//   pivot   = 0 for no pivoting
//           = 1 for partial (row) pivoting
//           = 2 for threshold (row) pivoting
//   thresh  Used only in threshold pivoting.  For each major step of the
//           algorithm, the pivot is chosen to be a nonzero below the
//           diagonal in the current column of A with the most nonzeros to
//           the right in its row, with absolute value at least
//           thresh*maxpiv, where maxpiv is the largest absolute value below
//           the diagonal in the current column.  Note that if thresh .le.
//           0.0, then the pivot is chosen purely on the basis of row
//           sparsity.  Also, if thresh .ge. 1.0, then the pivoting is
//           effectively partial pivoting with ties broken on the basis of
//           sparsity.
//   nrow    number of rows in A.
//   ncol    number of columns in A.
//   a       nonzeros in A.  Nonzeros in each column are contiguous and columns
//           are in left-to-right order, but nonzeros are not necessarily in
//           order by row within each column.
//   arow    arow(i) is the row number of the nonzero a(i).
//   acolst  acolst(j) is the index in a of the first nonzero in column j.
//           acolst(ncol+1) is one more than the number of nonzeros in A.
//   maxlu   size of arrays lu and lurow.
//
// Output parameters:
//   lastlu  index of last nonzero in lu; number of nonzeros in L-I+U.
//   lu      nonzeros in L and U.  Nonzeros in each column are contiguous.
//           Columns of U and L alternate: u1, l1, u2, l2, ..., un, ln.
//           Nonzeros are not necessarily in order by row within columns.
//           The diagonal elements of L, which are all 1, are not stored.
//   lurow   lurow(i) is the row number of the nonzero lu(i).
//           During the computation, these correspond to row numbers in A,
//           so we really store the non-triangular PtL and PtU.
//           At the end we transform them to row numbers in PA, so the
//           L and U we return are really triangular.
//   lcolst  lcolst(j) is the index in lu of the first nonzero in col j of L.
//   ucolst  ucolst(j) is the index in lu of the first nonzero in col j of U.
//           The last nonzero of col j of U is in position lcolst(j)-1, and
//           the last nonzero of col j of L is in position ucolst(j+1)-1.
//           ucolst(ncol+1) is one more than the number of nonzeros in L-I+U.
//           Notice that ucolst has dimension ncol+1 and lcolst has dimension ncol,
//           although ucolst(ncol+1)=lcolst(ncol) because the last column of L
//           contains only the diagonal one, which is not stored.
//   perm    perm(r) = s means that row r of A is in position s in PA.
//   error   Success or failure indication:
//             0  success
//             1  zero pivot encountered (factorization completed)
//             2  out of space
//
// Working parameters:
//   rwork   real work vector of length nrow
//   iwork   integer work vector of length 3*nrow (or 4*nrow);
//           partitioned by this routine into the following three (or
//           four) integer vectors of length nrow:
//
//   iwork(found)       integer vector used to control depth-first search.
//   iwork(parent)      also used by ludfs.
//   iwork(child)       also used by ludfs.
//   iwork(rowcnt)      rowcnt(i) is the number of remaining nonzeros in
//                      row i of A (not of PA); for threshold pivoting.
//
// Local variables:
//   jcol    column number being computed
//   lasta   number of nonzeros in A/AROW
//   locpiv  local pivot code: equals -1 for columns with no diagonal,
//           otherwise same as pivot
//   maxcol  index of current column of LU/LUROW
//   overwr  set to .true. if A and LU as given are equivalent arrays
//   xa      starting index of nonzeros in A/AROW (initially 1)
//   zpivot  set to .true. if a zero pivot is found by lucopy()
func lufact(pivot pivotPolicy, pivotThreshold, dropThreshold float64, nrow, ncol int, a []{{.ScalarType}}, arow []int, acolst []int,
	maxlu int, lastlu *int, lu []{{.ScalarType}}, lurow, lcolst, ucolst, rperm, cperm []int) error {

	var nzCount int

	// Allocate work arrays.
	rwork := make([]{{.ScalarType}}, nrow)
	twork := make([]{{.ScalarType}}, nrow)
	found := make([]int, nrow)
	child := make([]int, nrow)
	parent := make([]int, nrow)
	rowcnt := make([]int, nrow) // Used only with threshold pivoting.
	//pattern = make([]int, nrow)

	// Initialize useful values and zero out the dense vectors.
	// If we are threshold pivoting, get row counts.

	locpiv := pivot
	*lastlu = 0
	lasta := acolst[ncol+1-off] - 1
	ucolst[1-off] = 1

	ifill(rperm, nrow, 0)

	if pivot == thresholdPivoting {
		cntrow(arow, lasta, rowcnt)
	}

	// If A and LU are equivalent, copy A to end of LU. xa is pointer to
	// start of copied array elements. overwr is set true if A and LU are
	// equivalent.

	xa := 1
	overwr := requiv(a, lu)
	if overwr {
		xa = maxlu - lasta + 1
		rcopy(a, a[xa-off:], lasta, true)
		icopy(arow, arow[xa-off:], lasta, true)
	}

	// Compute one column at a time.
	for jcol := 1; jcol <= ncol; jcol++ {
		// If overwriting, set maxcol to just before start of column jcol
		// of a. Otherwise, maxcol is just maxlu. Make sure there is
		// room for up to nrow nonzeros in this column.

		maxcol := maxlu
		if overwr {
			maxcol = xa + acolst[jcol-off] - 2
		}
		if *lastlu+nrow >= maxcol {
			return fmt.Errorf("limit of maxcol %v exceeded at column jcol %v", maxcol, jcol)
		}

		// Depth-first search from each above-diagonal nonzero of column
		// jcol of A, allocating storage for column jcol of U in
		// topological order and also for the non-fill part of column
		// jcol of L.

		ludfs(jcol, a[xa-off:], arow[xa-off:], acolst, lastlu, lurow, lcolst, ucolst, rperm, cperm, rwork, found, parent, child)

		// Compute the values of column jcol of L and U in the dense
		// vector, allocating storage for fill in L as necessary.

		lucomp(jcol, lastlu, lu, lurow, lcolst, ucolst, rperm, cperm, rwork, found, nil)

		// Copy the dense vector into the sparse data structure, find the
		// diagonal element (pivoting if specified), and divide the
		// column of L by it.

		zpivot, err := lucopy(locpiv, pivotThreshold, dropThreshold, nzCount, jcol, ncol /*&iwork[rowcnt],*/, lastlu, lu, lurow, lcolst, ucolst, rperm, cperm, rwork, found, twork)
		if err != nil {
			return err
		}
		if zpivot > 0 {
			return fmt.Errorf("zpivot = %v", zpivot)
		}

		// If there are no diagonal elements after this column, change the pivot mode.

		if jcol == nrow {
			locpiv = noDiagonalElement
		}
		//l200:
	}

	// Fill in the zero entries of the permutation vector, and renumber the
	// rows so the data structure represents L and U, not PtL and PtU.

	jcol := ncol + 1
	for i := 1; i <= nrow; i++ {
		if rperm[i-off] != 0 {
			continue
		}
		rperm[i-off] = jcol // FIXME: cperm
		jcol = jcol + 1
		//l300:
	}
	for i := 1; i <= *lastlu; i++ {
		lurow[i-off] = rperm[lurow[i-off]-off]
		//l400:
	}
	return nil
}
